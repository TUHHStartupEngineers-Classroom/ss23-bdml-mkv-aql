---
title: "Supervised Learning Machien Learning Rgression"
author: "Agam Safaruddin"
---

# Challenge
I. Build a model

II. Create features with the recipes package

III. Bundle the model and recipe with the workflow package

IV. Evaluate your model with the yardstick package

# Libraries
```{r}
library(xgboost)
library(yardstick)
library(tidymodels)  # for the parsnip package, along with the rest of tidymodels
library(modelr)
# Helper packages
library(broom.mixed) # for converting bayesian models to tidy tibbles
# Standard
library(tidyverse)
library(dplyr)

# Modeling
library(parsnip)

# Preprocessing & Sampling
library(recipes)
library(rsample)

# Modeling Error Metrics
library(yardstick)

# Plotting Decision Trees
library(rpart.plot)

# For splitting the dataset
library(caret)
```

# Data from business case
```{r}
bike_orderlines_tbl = readRDS("datas/bike_orderlines.rds")
glimpse(bike_orderlines_tbl)

model_sales_tbl <- bike_orderlines_tbl %>%
    select(total_price, model, category_2, frame_material) %>%
    
    group_by(model, category_2, frame_material) %>%
    summarise(total_sales = sum(total_price)) %>%
    ungroup() %>%
    
    arrange(desc(total_sales))
```

```{r}
bike_features_tbl <- readRDS("datas/bike_features_tbl.rds")
glimpse(bike_features_tbl)

bike_features_tbl <- bike_features_tbl %>% 
    select(model:url, `Rear Derailleur`, `Shift Lever`) %>% 
    mutate(
      `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano dura-ace ") %>% as.numeric(),
      `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano ultegra ") %>% as.numeric(),
      `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano 105 ") %>% as.numeric(),
      `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano tiagra ") %>% as.numeric(),
      `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano sora") %>% as.numeric(),
      `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano deore(?! xt)") %>% as.numeric(),
      `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano slx") %>% as.numeric(),
      `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano grx") %>% as.numeric(),
      `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano deore xt |shimano xt ") %>% as.numeric(),
      `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano xtr") %>% as.numeric(),
      `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano saint") %>% as.numeric(),
      `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram red") %>% as.numeric(),
      `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram force") %>% as.numeric(),
      `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram rival") %>% as.numeric(),
      `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram apex") %>% as.numeric(),
      `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram xx1") %>% as.numeric(),
      `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram x01|sram xo1") %>% as.numeric(),
      `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram gx") %>% as.numeric(),
      `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram nx") %>% as.numeric(),
      `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram sx") %>% as.numeric(),
      `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram sx") %>% as.numeric(),
      `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect("campagnolo potenza") %>% as.numeric(),
      `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect("campagnolo super record") %>% as.numeric(),
      `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect("shimano nexus") %>% as.numeric(),
      `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect("shimano alfine") %>% as.numeric()
    ) %>% 
  # Remove original columns  
  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% 
  # Set all NAs to 0
  mutate_if(is.numeric, ~replace(., is.na(.), 0))
```

```{r}
bike_features_tbl <- bike_features_tbl %>% 
  
  mutate(id = row_number()) %>% 
  
  select(id, everything(), -url)

bike_features_tbl 
```

# 0.1 Splitting datasets into 80% training, 20% testing
* Because using rsample::initial_split() will not split the dataset equally (missing variables)
* Another method is used

```{r}
# Get all unique values of category_2
all_categories <- unique(bike_features_tbl$category_2)

# Split the data into train and test sets
set.seed(1234)
train_indices <- createDataPartition(bike_features_tbl$category_2, p = 0.8, list = FALSE)
train_tbl <- bike_features_tbl[train_indices, ]
test_indices <- createDataPartition(bike_features_tbl$category_2, p = 0.2, list = FALSE)
test_tbl <- bike_features_tbl[test_indices, ]

# Check if train and test sets have all categories
missing_categories <- setdiff(all_categories, unique(train_tbl$category_2))
if (length(missing_categories) > 0) {
  cat("Missing categories train_tbl:", missing_categories, "\n")
}
missing_categories <- setdiff(all_categories, unique(test_tbl$category_2))
if (length(missing_categories) > 0) {
  cat("Missing categoriestest_tbl:", missing_categories, "\n")
}

# Check if testing contains all category_2 values
train_tbl %>% distinct(category_2)
test_tbl %>% distinct(category_2)
```

# 0.2 check splitted dataset
```{r}
train_tbl
test_tbl
```

# 0.3 Metrics calculation function

```{r}
calc_metrics <- function(model, new_data = test_tbl) {

    model %>%
        predict(new_data = new_data) %>%

        bind_cols(new_data %>% select(price)) %>%
        yardstick::metrics(truth = price, estimate = .pred)

}

```

# 1 Build model

```{r}
model_boost_tree_xgboost <- boost_tree(
    mode = "regression",
    mtry = 30,
    learn_rate = 0.25,
    tree_depth = 7
    ) %>%
    set_engine("xgboost") %>%
    fit(price ~ ., data = train_tbl %>% select(-c(id:weight), -category_1, -c(category_3:gender)))

model_boost_tree_xgboost %>% calc_metrics(test_tbl)
```

```{r}
model_boost_tree_xgboost <- boost_tree(
    mode = "regression",
    mtry = 30,
    learn_rate = 0.25,
    tree_depth = 7
    ) %>%
    set_engine("xgboost")
```

# 2 create features with recipe()

```{r}
recipe_obj <- recipe(price ~ ., data = train_tbl) %>% 
                     step_rm(id:weight, category_1, category_3:gender)%>%
                     step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%
                     prep(training = train_tbl)
```

**Preprocessing using bake()**
```{r}
train_transformed_tbl <- bake(recipe_obj, new_data = train_tbl)
test_transformed_tbl  <- bake(recipe_obj, new_data = test_tbl)
```

# 3 Bundel model with recipe and workfolw

```{r}
bundel_model_wflow <- 
  workflow() %>% 
  add_model(model_boost_tree_xgboost) %>% 
  add_recipe(recipe_obj)

bundel_model_wflow
```

**Fit model**
```{r}
fitted_model <- bundel_model_wflow %>% fit(data = train_tbl)
```


**Predict using made model**
```{r}
predict(fitted_model, test_tbl)
```

# 4 Evaluate model with yardstick
```{r}
fitted_model %>%
    predict(new_data = test_tbl) %>%

    bind_cols(test_tbl %>% select(price)) %>%
    yardstick::metrics(truth = price, estimate = .pred)
```

