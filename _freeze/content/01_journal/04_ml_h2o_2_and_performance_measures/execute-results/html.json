{
  "hash": "e62860617cd48942c0fe88ba7554c9d4",
  "result": {
    "markdown": "---\ntitle: \"Automated machine learning with H2O part 2 AND Performance Measure\"\nauthor: \"Agam Safaruddin\"\n---\n\n\n::: callout-note\nSince h2o requires java 64 bit, and I have been working on the challenges in kaggle.com. I will still publish this, and I will also include the notebook file called 'automated-ml-with-h2o-2.ipynb' in the github workspace. In that notebook you can see the finished challenges.\n:::\n\n# Challenge 1 H20\n* Predict if product will be in backorder status\n* given a number of product metrics such as current inventory, transit time, demand forecasts and prior sales\n\n## Libraries\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-1_94abf036652b3f44ca505bf42ead023a'}\n\n```{.r .cell-code}\nlibrary(h2o)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'h2o' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'h2o'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Die folgenden Objekte sind maskiert von 'package:stats':\n#> \n#>     cor, sd, var\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Die folgenden Objekte sind maskiert von 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n```\n:::\n\n```{.r .cell-code}\n#library(cowplot)\nlibrary(glue)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'tidyverse' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'ggplot2' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'tibble' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'tidyr' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'readr' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'purrr' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'dplyr' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'stringr' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'forcats' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'lubridate' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ lubridate::day()   masks h2o::day()\n#> ✖ dplyr::filter()    masks stats::filter()\n#> ✖ lubridate::hour()  masks h2o::hour()\n#> ✖ dplyr::lag()       masks stats::lag()\n#> ✖ lubridate::month() masks h2o::month()\n#> ✖ lubridate::week()  masks h2o::week()\n#> ✖ lubridate::year()  masks h2o::year()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'readxl' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n```{.r .cell-code}\nlibrary(rsample)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'rsample' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n```{.r .cell-code}\nlibrary(recipes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Paket 'recipes' wurde unter R Version 4.2.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attache Paket: 'recipes'\n#> \n#> Das folgende Objekt ist maskiert 'package:stringr':\n#> \n#>     fixed\n#> \n#> Das folgende Objekt ist maskiert 'package:stats':\n#> \n#>     step\n```\n:::\n\n```{.r .cell-code}\nlibrary(PerformanceAnalytics)  # for skewness  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Lade nötiges Paket: xts\n#> Lade nötiges Paket: zoo\n#> \n#> Attache Paket: 'zoo'\n#> \n#> Die folgenden Objekte sind maskiert von 'package:base':\n#> \n#>     as.Date, as.Date.numeric\n#> \n#> \n#> Attache Paket: 'xts'\n#> \n#> Die folgenden Objekte sind maskiert von 'package:dplyr':\n#> \n#>     first, last\n#> \n#> \n#> Attache Paket: 'PerformanceAnalytics'\n#> \n#> Das folgende Objekt ist maskiert 'package:graphics':\n#> \n#>     legend\n```\n:::\n:::\n\n\n\n# 1 Load training and test dataset\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-2_1e23221ff2678c80c3f532fcf4ab89ee'}\n\n```{.r .cell-code}\nproduct_backorders_tbl <- read_csv(\"datas/product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## 2 Preprocessing\n**Get varaibles names list**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-3_dd55eac5cf868351b8aebf3ddf816e3f'}\n\n```{.r .cell-code}\ncolumn_names <- names(product_backorders_tbl)\nprint(column_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  [1] \"sku\"               \"national_inv\"      \"lead_time\"        \n#>  [4] \"in_transit_qty\"    \"forecast_3_month\"  \"forecast_6_month\" \n#>  [7] \"forecast_9_month\"  \"sales_1_month\"     \"sales_3_month\"    \n#> [10] \"sales_6_month\"     \"sales_9_month\"     \"min_bank\"         \n#> [13] \"potential_issue\"   \"pieces_past_due\"   \"perf_6_month_avg\" \n#> [16] \"perf_12_month_avg\" \"local_bo_qty\"      \"deck_risk\"        \n#> [19] \"oe_constraint\"     \"ppap_risk\"         \"stop_auto_buy\"    \n#> [22] \"rev_stop\"          \"went_on_backorder\"\n```\n:::\n:::\n\n\n\n**Split data**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-4_67183fed679c2a222a77f3c332cb7c62'}\n\n```{.r .cell-code}\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj_challenge_1 <- rsample::initial_split(product_backorders_tbl, prop = 0.8)\n\n# Assign training and test data\ntrain_readable_tbl_challenge_1 <- training(split_obj_challenge_1)\ntest_readable_tbl_challenge_1  <- testing(split_obj_challenge_1)\n```\n:::\n\n\n\n**Function for histogram facet**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-5_399d456e62949392d00594f1bc762c4d'}\n\n```{.r .cell-code}\n# Plot Faceted Histgoram function\n\n# To create a function and test it, we can assign our data temporarily to data\ndata <- train_readable_tbl_challenge_1 \n\nplot_hist_facet <- function(data, fct_reorder = FALSE, fct_rev = FALSE, \n                            bins = 10, fill = \"#2dc6d6\", color = \"white\", \n                            ncol = 5, scale = \"free\") {\n    \n    data_factored <- data %>%\n    \n        # Convert input to make the function fail safe \n        # (if other content might be provided)\n        mutate_if(is.character, as.factor) %>%\n        mutate_if(is.factor, as.numeric) %>%\n        \n        # Data must be in long format to make facets\n        pivot_longer(cols = everything(),\n                     names_to = \"key\",\n                     values_to = \"value\",\n                     # set key = factor() to keep the order\n                     names_transform = list(key = forcats::fct_inorder)) \n    \n    if (fct_reorder) {\n        data_factored <- data_factored %>%\n            mutate(key = as.character(key) %>% as.factor())\n    }\n    \n    if (fct_rev) {\n        data_factored <- data_factored %>%\n            mutate(key = fct_rev(key))\n    }\n    \n    g <- data_factored %>%\n        ggplot(aes(x = value, group = key)) +\n        geom_histogram(bins = bins, fill = fill, color = color) +\n        facet_wrap(~ key, ncol = ncol, scale = scale)\n    \n    return(g)\n    \n}\n```\n:::\n\n\n**Histogram Facet**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-6_055b8f6fad4d9bc3b6ed28a4460f1da3'}\n\n```{.r .cell-code}\ntrain_readable_tbl_challenge_1 %>% \n  relocate(went_on_backorder) %>% \n  plot_hist_facet()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 876 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](04_ml_h2o_2_and_performance_measures_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n**zero variance features**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-7_1a6219986d176ac8237f4b1b90bbd732'}\n\n```{.r .cell-code}\nrecipe_obj_challenge_1 <- recipe(went_on_backorder ~ ., data = train_readable_tbl_challenge_1) %>%\n    step_zv(all_predictors()) %>%\n    step_dummy(all_nominal()) \n\nrecipe_obj_challenge_1 %>% \n      prep()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Inputs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Number of variables by role\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> outcome:    1\n#> predictor: 22\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Training information\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Training data contained 15242 data points and 876 incomplete rows.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Operations\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> • Zero variance filter removed: <none> | Trained\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> • Dummy variables from: potential_issue, deck_risk, ... | Trained\n```\n:::\n:::\n\n\n\n**Bake train and test data**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-8_c276d9a162a00213cd16531bf4c9d655'}\n\n```{.r .cell-code}\nprep_recipe_challenge_1 <- prep(recipe_obj_challenge_1)\n\ntrain_tbl_challenge_1 <- bake(prep_recipe_challenge_1, new_data = train_readable_tbl_challenge_1)\n\ntrain_tbl_challenge_1 %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 15,242\n#> Columns: 23\n#> $ sku                   <dbl> 1543349, 1411689, 1672722, 1119722, 1817291, 121…\n#> $ national_inv          <dbl> 16, 147, 12, 109, 238, 2, 0, 217, 2, 6, 3, 0, 32…\n#> $ lead_time             <dbl> 4, 2, 8, 2, 2, 8, 2, NA, NA, 9, 12, 2, 12, 8, 8,…\n#> $ in_transit_qty        <dbl> 0, 46, 1, 0, 26, 0, 0, 73, 0, 0, 1, 0, 97, 0, 0,…\n#> $ forecast_3_month      <dbl> 0, 270, 48, 0, 305, 0, 8, 0, 0, 0, 0, 18, 767, 0…\n#> $ forecast_6_month      <dbl> 0, 530, 96, 0, 503, 0, 16, 0, 0, 0, 0, 18, 1577,…\n#> $ forecast_9_month      <dbl> 0, 800, 144, 0, 701, 0, 20, 0, 0, 0, 0, 27, 2537…\n#> $ sales_1_month         <dbl> 0, 127, 15, 0, 124, 0, 0, 104, 0, 0, 0, 7, 277, …\n#> $ sales_3_month         <dbl> 0, 416, 43, 0, 312, 0, 0, 400, 0, 1, 0, 10, 965,…\n#> $ sales_6_month         <dbl> 0, 679, 70, 0, 564, 0, 0, 814, 0, 1, 0, 19, 1884…\n#> $ sales_9_month         <dbl> 0, 952, 95, 50, 796, 0, 0, 1294, 0, 2, 0, 28, 27…\n#> $ min_bank              <dbl> 0, 92, 1, 3, 85, 0, 1, 105, 0, 0, 0, 1, 298, 0, …\n#> $ pieces_past_due       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ perf_6_month_avg      <dbl> 0.73, 0.90, 0.50, 1.00, 1.00, 0.82, -99.00, -99.…\n#> $ perf_12_month_avg     <dbl> 0.78, 0.93, 0.50, 0.99, 1.00, 0.87, -99.00, -99.…\n#> $ local_bo_qty          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ potential_issue_Yes   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk_Yes         <dbl> 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, …\n#> $ oe_constraint_Yes     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ ppap_risk_Yes         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, …\n#> $ stop_auto_buy_Yes     <dbl> 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, …\n#> $ rev_stop_Yes          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n#> $ went_on_backorder_Yes <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n```\n:::\n\n```{.r .cell-code}\ntest_tbl_challenge_1 <- bake(prep_recipe_challenge_1, new_data = test_readable_tbl_challenge_1)\n```\n:::\n\n\n\n# 3 Correlation Analysis\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-9_4d7dfcbd98d4f655fb209b283a46ee1e'}\n\n```{.r .cell-code}\ntrain_tbl_challenge_1 %>%\n\n        # Convert characters & factors to numeric\n        mutate(across(where(is.character), as.factor)) %>%\n        mutate(across(where(is.factor), as.numeric)) %>%\n        \n        # Correlation\n        cor(use = \"pairwise.complete.obs\") %>% \n        as_tibble() %>%\n        mutate(feature = names(.)) %>% \n        select(feature, went_on_backorder_Yes) %>% \n        \n        # Filter the target, because we now the correlation is 100%\n        filter(!(feature == \"went_on_backorder_Yes\")) %>% \n        \n        # Convert character back to factors\n        mutate(across(where(is.character), as_factor))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"feature\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"went_on_backorder_Yes\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"sku\",\"2\":\"-0.157644112\"},{\"1\":\"national_inv\",\"2\":\"-0.018106659\"},{\"1\":\"lead_time\",\"2\":\"-0.085883855\"},{\"1\":\"in_transit_qty\",\"2\":\"-0.018496258\"},{\"1\":\"forecast_3_month\",\"2\":\"0.004751517\"},{\"1\":\"forecast_6_month\",\"2\":\"-0.001476793\"},{\"1\":\"forecast_9_month\",\"2\":\"-0.003716025\"},{\"1\":\"sales_1_month\",\"2\":\"-0.010766938\"},{\"1\":\"sales_3_month\",\"2\":\"-0.011511817\"},{\"1\":\"sales_6_month\",\"2\":\"-0.012846727\"},{\"1\":\"sales_9_month\",\"2\":\"-0.013524538\"},{\"1\":\"min_bank\",\"2\":\"-0.010914054\"},{\"1\":\"pieces_past_due\",\"2\":\"0.002118501\"},{\"1\":\"perf_6_month_avg\",\"2\":\"0.045800918\"},{\"1\":\"perf_12_month_avg\",\"2\":\"0.045222391\"},{\"1\":\"local_bo_qty\",\"2\":\"0.027886293\"},{\"1\":\"potential_issue_Yes\",\"2\":\"0.053140895\"},{\"1\":\"deck_risk_Yes\",\"2\":\"-0.050985734\"},{\"1\":\"oe_constraint_Yes\",\"2\":\"0.006568618\"},{\"1\":\"ppap_risk_Yes\",\"2\":\"0.027257028\"},{\"1\":\"stop_auto_buy_Yes\",\"2\":\"-0.025102145\"},{\"1\":\"rev_stop_Yes\",\"2\":\"-0.008414786\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n**Get correlation function**\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-10_b472270dcdca834859cc15629b97de99'}\n\n```{.r .cell-code}\nget_cor <- function(data, target, use = \"pairwise.complete.obs\",\n                    fct_reorder = FALSE, fct_rev = FALSE) {\n\n    feature_expr <- enquo(target)\n    feature_name <- quo_name(feature_expr)\n\n    data_cor <- data %>%\n        mutate(across(where(is.character), as.factor)) %>%\n        mutate(across(where(is.factor), as.numeric)) %>%\n        cor(use = use) %>%\n        as.tibble() %>%\n        mutate(feature = names(.)) %>%\n        select(feature, !! feature_expr) %>%\n        filter(!(feature == feature_name)) %>%\n        mutate_if(is.character, as_factor)\n\n    if (fct_reorder) {\n        data_cor <- data_cor %>% \n            mutate(feature = fct_reorder(feature, !! feature_expr)) %>%\n            arrange(feature)\n    }\n\n    if (fct_rev) {\n        data_cor <- data_cor %>% \n            mutate(feature = fct_rev(feature)) %>%\n            arrange(feature)\n    }\n\n    return(data_cor)\n\n}\n```\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-11_7bc41854246ecfc66007321488d58ada'}\n\n```{.r .cell-code}\ndata_cor_challenge_1 <- train_tbl_challenge_1 %>%\n\n  # Correlation\n  get_cor(target = went_on_backorder_Yes, fct_reorder = T, fct_rev = T) %>%\n  \n  # Create label text\n  mutate(feature_name_text = round(went_on_backorder_Yes, digits = 2)) %>%\n  \n  # Create flags so that we can change the color for poitive and negative\n  mutate(Correlation = case_when(\n    (went_on_backorder_Yes) >= 0 ~ \"Positive\",\n    TRUE                   ~ \"Negative\") %>% as.factor())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n\n```{.r .cell-code}\ndata_cor_challenge_1 %>%\n  ggplot(aes(x = went_on_backorder_Yes, y = feature, group = feature)) +\n  geom_point(aes(color = Correlation), size = 2) +\n  geom_segment(aes(xend = 0, yend = feature, color = Correlation), size = 1) +\n  geom_vline(xintercept = 0, color = \"black\", size = 0.5) +\n  expand_limits(x = c(-1, 1)) +\n  scale_color_manual(values = c(\"red\", \"#2dc6d6\")) +\n  geom_label(aes(label = feature_name_text), hjust = \"outward\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](04_ml_h2o_2_and_performance_measures_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n# 4 Machine Learning with H2O \n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-12_7e118b62c9fd0240df922678ff9e85cd'}\n\n```{.r .cell-code}\nproduct_backorders_tbl          <- read_csv(\"datas/product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(product_backorders_tbl, prop = 0.8)\ntrain_readable_tbl_challenge_1              <- training(split_obj)\ntest_readable_tbl_challenge_1               <- testing(split_obj)\n\nrecipe_obj_challenge_1 <- recipe(went_on_backorder ~., data = train_readable_tbl_challenge_1) %>% \n    step_zv(all_predictors()) %>% \nstep_dummy(all_nominal()) %>%\n\n    prep()\n\ntrain_tbl_challenge_1 <- bake(recipe_obj_challenge_1, new_data = train_readable_tbl_challenge_1)\ntest_tbl_challenge_1  <- bake(recipe_obj_challenge_1, new_data = test_readable_tbl_challenge_1)\n```\n:::\n\n\n\n**Modeling**\n\n# Modeling\nh2o.init()\n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o_challenge_1 <- h2o.splitFrame(as.h2o(train_tbl_challenge_1), ratios = c(0.8), seed = 1234)\ntrain_h2o_challenge_1 <- split_h2o_challenge_1[[1]]\nvalid_h2o_challenge_1 <- split_h2o_challenge_1[[2]]\ntest_h2o_challenge_1  <- as.h2o(test_tbl_challenge_1)\n\n# Set the target and predictors\n#y <- \"went_on_backorder\"\ny <- \"went_on_backorder_Yes\"\nx <- setdiff(names(test_h2o_challenge_1), y)\n\n\n\nautoml_models_h2o_challenge_1 <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o_challenge_1,\n  validation_frame  = valid_h2o_challenge_1,\n  leaderboard_frame = test_h2o_challenge_1,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n\n\n\n\n# Inspecting Leaderboards\n\ntypeof(automl_models_h2o_challenge_1)\n\n\nslotNames(automl_models_h2o_challenge_1)\n\n\nprint(automl_models_h2o_challenge_1@leaderboard)\n\n\n\n# Make Predictions\n\nstacked_ensemble_h2o_challenge_1 <- h2o.getModel(\"StackedEnsemble_BestOfFamily_1_AutoML_2_20230615_92614\")\nstacked_ensemble_h2o_challenge_1\n\npredictions <- h2o.predict(stacked_ensemble_h2o_challenge_1, newdata = as.h2o(test_tbl_challenge_1))\n\ntypeof(predictions)\n## [1] \"environment\"\n\npredictions_tbl <- predictions %>% as_tibble()\n\n\n****\n# Challenge 2 Performance Measures\n\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-13_fd98ae397788b0e5969b777fd5c74147'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-14_19029ee689d510293c9dd079cd0f10f7'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-15_818d2005ab1b44807a4a3dae74aba8d7'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-16_af6e1b29f8ab2e1e5b619e40418f77df'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-17_394cfa3503d97029c29187f5796c9432'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-18_6b12db140bab56fe1b79deec555f0a5d'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-19_13f593935623d60035a7fa7f4f232f02'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-20_64bfe5a92cb8bb273a09cfc53de9d86f'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-21_f0edba31fd597489f5e5c295dc85da9c'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-22_283cf4a180b9a0c47bf3e1c393caffc8'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-23_64152497626c06a6a1c847e54bd5d6f4'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-24_632c113494f30500c28c8f3b7afe1a91'}\n\n:::\n\n::: {.cell hash='04_ml_h2o_2_and_performance_measures_cache/html/unnamed-chunk-25_65b74bcc26ddc72a6d2b8048d6a66f15'}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}